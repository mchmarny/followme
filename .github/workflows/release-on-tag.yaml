name: Release

on:
  push:
    tags:
      - 'v*' # v0.8.1

jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }}
    runs-on: ${{ matrix.os }}
    env:
      GO_VER: 1.15
      LINT_VER: v1.34
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      OUT_DIR: dist/archives
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        target_arch: [arm, arm64, amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-latest
            target_os: windows
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: windows-latest
            target_arch: arm
          - os: windows-latest
            target_arch: arm64
          - os: macOS-latest
            target_arch: arm
          - os: macOS-latest
            target_arch: arm64
    steps:

    - name: Setup (Go ${{ env.GO_VER }})
      id: go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VER }}

    - name: Checkout
      uses: actions/checkout@v2

    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Tidy
      run: |
        go mod tidy 
        go mod vendor

    - name: Lint
      if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
      uses: golangci/golangci-lint-action@v2
      with:
        version: ${{ env.LINT_VER }}
        only-new-issues: true

    - name: Test
      env:
        COVERAGE_OPTS: "-coverprofile=coverage.txt -covermode=atomic"
      if: matrix.target_arch == 'amd64'
      run: go test -v ./...

    - name: Build
      run: |
        mkdir -p ${{ env.OUT_DIR }}
        env CGO_ENABLED=0 GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} go build -ldflags "-X main.Version=$(echo ${GITHUB_REF:10})" -mod vendor -o ${{ env.OUT_DIR }}/followme-${{ matrix.target_os }} ./cmd/

    - name: Archive
      uses: actions/upload-artifact@v2
      with:
        name: followme-artifacts
        path: ${{ env.OUT_DIR }}

  publish:
    name: Publish
    needs: build
    env:
      ARTIFACT_DIR: ./release
    runs-on: ubuntu-latest
    steps:

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: followme-artifacts
          path: ${{ env.ARTIFACT_DIR }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Automatically generated... notes are coming.
          draft: false
          prerelease: false

      - name: Upload Mac Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ${{ env.ARTIFACT_DIR }}/followme-darwin
          asset_name: followme
          asset_content_type: application/octet-stream

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ${{ env.ARTIFACT_DIR }}/followme-linux
          asset_name: followme_linux
          asset_content_type: application/octet-stream

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ${{ env.ARTIFACT_DIR }}/followme-windows
          asset_name: followme.exe
          asset_content_type: application/octet-stream

  installer:
    name: Installer
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Dependencies
        run: |
          sudo apt-get install -y jq

      - name: Release Tag
        run: |
          RELEASE_TAG=${GITHUB_REF#refs/*/}
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV

      - name: Release SHA
        run: |
          echo "release tag: ${RELEASE_TAG}"
          ASSET_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/mchmarny/followme/releases/tags/${RELEASE_TAG}" | jq '.assets[] | select(.name=="followme") | .url')
          ASSET_SHA=$(curl -L -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $ASSET_URL 2> \
            /dev/null | shasum -a 256 | sed -n 's/\(.*\) -/\1/p' | xargs -I {} echo {})
          echo "ASSET_SHA=${ASSET_SHA}" >> $GITHUB_ENV
          
      - name: Formula
        run: |
          echo "release tag: '${RELEASE_TAG}'"
          echo "release sha: '${ASSET_SHA}'"
          sed -e "s/TAGVALUE/${RELEASE_TAG}/g" -e "s/SHAVALUE/${ASSET_SHA}/g" deployments/followme.tmpl > deployments/followme.rb

      - name: Commit
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "formula ${RELEASE_TAG}"
          git push